1. Create App Registration & Secret from Entra ID
2. Record Client_ID, Client_Secret, and Tenant_ID from App Registration
3. Create Database
4. Within the Database -- Assign Admin permission to App Registration
5. Create Table within ADX Database
// Create table
.create table SplunkTableRaw (Records:dynamic)

// $.FWLogEntry <-> MUST MATCH THE JSON OBJECT GETTING INGESTED FROM THE SOURCE [JSON FILE]!!
// FWLogEntry gets MAPPED TO THE "RECORDS" COLUMN of the SplunkTableRaw Table
// e.g. {"FWLogEntry":{"TimeGenerated":"2024-03-13T18:45:54.9122018Z", "Company":"MFCC-G9-DOG", "Hacker":"Maj JJ Bottles", "Venue":"BSides DC", "Type":"SplunkTable"}}
.create table SplunkTableRaw ingestion json mapping 'SplunkTableMapping' '[{"column":"Records", "Properties":{"Path":"$.FWLogEntry"}}]'

.alter-merge table SplunkTableRaw policy retention softdelete = 0d

.create table SplunkTable (FWLogEntry:dynamic)

.create-or-alter function SplunkTableExpand() {
    SplunkTableRaw
    | project Records
}

.alter table SplunkTable policy update @'[{"Source": "SplunkTableRaw", "Query": "SplunkTableExpand()", "IsEnabled": true, "IsTransactional": true}]'

//.drop function SplunkTableExpand
//.drop table SplunkTable ingestion json mapping "SplunkTable_JSON_Mapping"

// dummy data to ingest and ensure the tables, policies, mapping, and expand function is operating correctly. 
.ingest inline into table SplunkTable with (format = "json") <| {"FWLogEntry":{"TimeGenerated":"2024-03-13T18:45:54.9122018Z", "Company":"MFCC-G9-DOG", "Hacker":"Maj JJ Bottles", "Venue":"BSides DC", "Type":"SplunkTable"}}

SplunkTable

SplunkTable
| extend t = parse_json(FWLogEntry)
| distinct TimeGenerated=todatetime(t.TimeGenerated), Company=tostring(t.Company), Hacker=tostring(t.Hacker), Venue=tostring(t.Venue), Type=tostring(t.Type)
